import { OnInit, EventEmitter } from '@angular/core';
import { Observable } from 'rxjs';
import { WebcamImage, WebcamInitError } from 'ngx-webcam';
import { ControlValueAccessor } from '@angular/forms';
export declare class UploaderComponent implements ControlValueAccessor, OnInit {
    urls: any[];
    selectFileType: boolean;
    fileList: any[];
    fileType: string;
    liveCamera: boolean;
    pdfAvailable: boolean;
    mobile: boolean;
    UploadCaptions: boolean;
    singleFile: any;
    multiple: boolean;
    fileUpload: boolean;
    backButton: boolean;
    source: any;
    fileChanged: EventEmitter<any>;
    uploadData: EventEmitter<any>;
    _onClear: EventEmitter<any>;
    _imagePath: string;
    showWebcam: boolean;
    allowCameraSwitch: boolean;
    multipleWebcamsAvailable: boolean;
    deviceId: string;
    videoOptions: MediaTrackConstraints;
    errors: WebcamInitError[];
    webcamImage: WebcamImage;
    private trigger;
    private nextWebcam;
    uploading: boolean;
    private innerValue;
    private onTouchedCallback;
    private onChangeCallback;
    ngOnInit(): void;
    value: any;
    writeValue(value: any): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    onBlur(): void;
    onChange(event: any): void;
    clear(): void;
    back(): void;
    toggleVisibility(filetype: string): void;
    upload(): void;
    MergeImages(): void;
    delete(urls: any): void;
    triggerSnapshot(): void;
    toggleWebcam(): void;
    handleInitError(error: WebcamInitError): void;
    showNextWebcam(directionOrDeviceId: boolean | string): void;
    handleImage(webcamImage: WebcamImage): void;
    cameraWasSwitched(deviceId: string): void;
    readonly triggerObservable: Observable<void>;
    readonly nextWebcamObservable: Observable<boolean | string>;
}
